{"version":3,"sources":["webpack://tyler-auer-portfolio/./src/templates/cat_and_tag.tsx"],"names":["data","pageContext","h1LabelCss","blogLinkCss","blog","label","type","postsToList","tagPosts","nodes","push","categoryPosts","toUpperCase","slice","name","content","css","spacing","A","sx","to","toLowerCase","map","p","post","key","path"],"mappings":"4YAYA,mBAAe,GAA2B,QAAxBA,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAChBC,EAAa,EAObC,EAAc,EAIZC,EAAsBH,EAAtBG,KAAMC,EAAgBJ,EAAhBI,MAAOC,EAASL,EAATK,KAEjBC,EAAc,GAEdP,SAAJ,UAAIA,EAAMQ,gBAAV,OAAI,EAAgBC,OAAOF,EAAYG,KAAZ,MAAAH,GAAW,OAASP,EAAKQ,SAASC,QACzDT,SAAJ,UAAIA,EAAMW,qBAAV,OAAI,EAAqBF,OAAOF,EAAYG,KAAZ,MAAAH,GAAW,OAASP,EAAKW,cAAcF,QAQvE,OACE,QAAC,IAAD,MACE,QAAC,IAAD,MACE,qBAAWJ,EAAX,0BACED,EAAK,GAAGQ,cAAgBR,EAAKS,MAAM,IADrC,UAGA,gBAAMC,KAAK,cAAcC,QAAYV,EAAL,wCAAkDD,MAEpF,QAAC,IAAD,MACE,qBACE,QAAC,IAAD,CACEY,KAAKA,QAAF,6DAEiBC,SAFjB,OAKH,uBACE,mBACE,gBAAMD,IAAKd,GAAaG,GAD1B,MAC2C,KACzC,QAAC,EAAAa,EAAD,CAAGC,GAAIhB,EAAaiB,GAAE,IAAMhB,GACzBA,KAGL,SA7BK,kBACf,qCACkBA,EADlB,kBACuCE,EAAKe,cAD5C,KAC6DhB,EAAMgB,cADnE,OA4BU,SAGJ,QAAC,IAAD,MACE,uBACGd,EAAYe,KAAI,SAACC,GAAD,OACf,QAAC,IAAD,CAAaC,KAAMD,EAAGE,IAAKF,EAAEG","file":"component---src-templates-cat-and-tag-tsx-e5c6bd183fb2c70a009a.js","sourcesContent":["import { graphql } from 'gatsby';\nimport { css } from '@emotion/react';\nimport { Helmet } from 'react-helmet';\n\nimport { Box } from '@/elements/Box';\nimport { GlobalStyles } from '@/components/GlobalStyles';\nimport { PostPreview } from '@/components/PostPreview';\nimport { A } from '@/elements/A';\n\nimport { spacing } from '@/constants';\nimport { PageBox } from '@/components/PageBox';\n\nexport default ({ data, pageContext }) => {\n  const h1LabelCss = css`\n    color: #282828;\n    background: var(--color-punch-bright);\n    padding: 0.5rem 1rem;\n    border-radius: 1rem;\n  `;\n\n  const blogLinkCss = css`\n    border-bottom: none;\n  `;\n\n  const { blog, label, type } = pageContext;\n\n  let postsToList = [];\n\n  if (data?.tagPosts?.nodes) postsToList.push(...data.tagPosts.nodes);\n  if (data?.categoryPosts?.nodes) postsToList.push(...data.categoryPosts.nodes);\n\n  const Subtitle = () => (\n    <div>\n      Posts from the {blog} blog with the {type.toLowerCase()} \"{label.toLowerCase()}\"\n    </div>\n  );\n\n  return (\n    <GlobalStyles>\n      <Helmet>\n        <title>{`${label} posts - Tyler Auer's ${\n          blog[0].toUpperCase() + blog.slice(1)\n        } Blog`}</title>\n        <meta name=\"description\" content={`${label} posts by Tyler Auer in a blog about ${blog}`} />\n      </Helmet>\n      <PageBox>\n        <main>\n          <Box\n            css={css`\n              border-bottom: 3px solid var(--color-punch);\n              padding-bottom: ${spacing.xxl};\n            `}\n          >\n            <header>\n              <h1>\n                <span css={h1LabelCss}>{label}</span> in{' '}\n                <A sx={blogLinkCss} to={`/${blog}`}>\n                  {blog}\n                </A>\n              </h1>\n              <Subtitle />\n            </header>\n          </Box>\n          <Box>\n            <section>\n              {postsToList.map((p) => (\n                <PostPreview post={p} key={p.path} />\n              ))}\n            </section>\n          </Box>\n        </main>\n      </PageBox>\n    </GlobalStyles>\n  );\n};\n\nexport const pageQuery = graphql`\n  query($blog: String!, $label: String!, $isTag: Boolean!, $isCategory: Boolean!) {\n    tagPosts: allMdx(\n      filter: { fields: { blog: { eq: $blog } }, frontmatter: { tags: { in: [$label] } } }\n    ) @include(if: $isTag) {\n      nodes {\n        frontmatter {\n          title\n          subtitle\n          date_created(formatString: \"MMMM D, YYYY\")\n          tags\n          category\n          date_last_updated\n        }\n        fields {\n          path\n          blog\n        }\n      }\n    }\n    categoryPosts: allMdx(\n      filter: { fields: { blog: { eq: $blog } }, frontmatter: { category: { eq: $label } } }\n    ) @include(if: $isCategory) {\n      nodes {\n        frontmatter {\n          title\n          subtitle\n          date_created(formatString: \"MMMM D, YYYY\")\n          tags\n          category\n          date_last_updated\n        }\n        fields {\n          path\n          blog\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}